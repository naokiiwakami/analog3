/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Sun Oct  8 07:02:23 2017. */

#ifndef PB_NANO_COMPACT_DESCRIPTOR_PB_H_INCLUDED
#define PB_NANO_COMPACT_DESCRIPTOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _compact_descriptor_Component_Type {
    compact_descriptor_Component_Type_Rack = 0,
    compact_descriptor_Component_Type_Module = 1,
    compact_descriptor_Component_Type_Knob = 2,
    compact_descriptor_Component_Type_Selector = 3,
    compact_descriptor_Component_Type_ValueInputPort = 4,
    compact_descriptor_Component_Type_ValueOutputPort = 5,
    compact_descriptor_Component_Type_NoteInputPort = 6,
    compact_descriptor_Component_Type_NoteOutputPort = 7
} compact_descriptor_Component_Type;

typedef enum _compact_descriptor_Attribute_Type {
    compact_descriptor_Attribute_Type_Value = 0,
    compact_descriptor_Attribute_Type_Scale = 1,
    compact_descriptor_Attribute_Type_Choices = 2,
    compact_descriptor_Attribute_Type_WireId = 3,
    compact_descriptor_Attribute_Type_Direction = 4,
    compact_descriptor_Attribute_Type_Signal = 5,
    compact_descriptor_Attribute_Type_ModuleType = 6,
    compact_descriptor_Attribute_Type_SelectorIndex = 7
} compact_descriptor_Attribute_Type;

/* Struct definitions */
typedef struct _compact_descriptor_Description {
    pb_callback_t component;
} compact_descriptor_Description;

typedef struct _compact_descriptor_Attribute {
    compact_descriptor_Attribute_Type type;
    bool has_ivalue;
    uint32_t ivalue;
    pb_callback_t svalue;
    bool has_id;
    uint32_t id;
} compact_descriptor_Attribute;

typedef struct _compact_descriptor_Component {
    pb_callback_t name;
    compact_descriptor_Component_Type type;
    bool has_id;
    uint32_t id;
    pb_callback_t attribute;
    pb_callback_t sub_component;
} compact_descriptor_Component;

/* Default values for struct fields */

/* Initializer values for message structs */
#define compact_descriptor_Description_init_default {{{NULL}, NULL}}
#define compact_descriptor_Component_init_default {{{NULL}, NULL}, (compact_descriptor_Component_Type)0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define compact_descriptor_Attribute_init_default {(compact_descriptor_Attribute_Type)0, false, 0, {{NULL}, NULL}, false, 0}
#define compact_descriptor_Description_init_zero {{{NULL}, NULL}}
#define compact_descriptor_Component_init_zero   {{{NULL}, NULL}, (compact_descriptor_Component_Type)0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define compact_descriptor_Attribute_init_zero   {(compact_descriptor_Attribute_Type)0, false, 0, {{NULL}, NULL}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define compact_descriptor_Description_component_tag 1
#define compact_descriptor_Attribute_type_tag    1
#define compact_descriptor_Attribute_ivalue_tag  2
#define compact_descriptor_Attribute_svalue_tag  3
#define compact_descriptor_Attribute_id_tag      4
#define compact_descriptor_Component_name_tag    1
#define compact_descriptor_Component_type_tag    2
#define compact_descriptor_Component_id_tag      3
#define compact_descriptor_Component_attribute_tag 4
#define compact_descriptor_Component_sub_component_tag 5

/* Struct field encoding specification for nanopb */
extern const pb_field_t compact_descriptor_Description_fields[2];
extern const pb_field_t compact_descriptor_Component_fields[6];
extern const pb_field_t compact_descriptor_Attribute_fields[5];

/* Maximum encoded size of messages (where known) */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define NANO_COMPACT_DESCRIPTOR_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
