// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connector.proto

#ifndef PROTOBUF_connector_2eproto__INCLUDED
#define PROTOBUF_connector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "module_descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace connector {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_connector_2eproto();
void protobuf_AssignDesc_connector_2eproto();
void protobuf_ShutdownFile_connector_2eproto();

class Request;
class Reply;

enum Request_Command {
  Request_Command_DESCRIBE = 0,
  Request_Command_SET_ATTRIBUTE = 1,
  Request_Command_UNSET_ATTRIBUTE = 2,
  Request_Command_ADD_SUBCOMPONENT = 3,
  Request_Command_REMOVE_SUBCOMPONENT = 4
};
bool Request_Command_IsValid(int value);
const Request_Command Request_Command_Command_MIN = Request_Command_DESCRIBE;
const Request_Command Request_Command_Command_MAX = Request_Command_REMOVE_SUBCOMPONENT;
const int Request_Command_Command_ARRAYSIZE = Request_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Command_descriptor();
inline const ::std::string& Request_Command_Name(Request_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Command_descriptor(), value);
}
inline bool Request_Command_Parse(
    const ::std::string& name, Request_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Command>(
    Request_Command_descriptor(), name, value);
}
enum Reply_Status {
  Reply_Status_SUCCESS = 0,
  Reply_Status_ERROR = 1
};
bool Reply_Status_IsValid(int value);
const Reply_Status Reply_Status_Status_MIN = Reply_Status_SUCCESS;
const Reply_Status Reply_Status_Status_MAX = Reply_Status_ERROR;
const int Reply_Status_Status_ARRAYSIZE = Reply_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Status_descriptor();
inline const ::std::string& Reply_Status_Name(Reply_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Status_descriptor(), value);
}
inline bool Reply_Status_Parse(
    const ::std::string& name, Reply_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Status>(
    Reply_Status_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Command Command;
  static const Command DESCRIBE = Request_Command_DESCRIBE;
  static const Command SET_ATTRIBUTE = Request_Command_SET_ATTRIBUTE;
  static const Command UNSET_ATTRIBUTE = Request_Command_UNSET_ATTRIBUTE;
  static const Command ADD_SUBCOMPONENT = Request_Command_ADD_SUBCOMPONENT;
  static const Command REMOVE_SUBCOMPONENT = Request_Command_REMOVE_SUBCOMPONENT;
  static inline bool Command_IsValid(int value) {
    return Request_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Request_Command_Command_MIN;
  static const Command Command_MAX =
    Request_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Request_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Request_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Request_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Request_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .connector.Request.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::connector::Request_Command command() const;
  inline void set_command(::connector::Request_Command value);

  // repeated string path = 2;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();

  // repeated uint32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // optional .connector.Attribute attribute = 4;
  inline bool has_attribute() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 4;
  inline const ::connector::Attribute& attribute() const;
  inline ::connector::Attribute* mutable_attribute();
  inline ::connector::Attribute* release_attribute();
  inline void set_allocated_attribute(::connector::Attribute* attribute);

  // optional .connector.Component component = 5;
  inline bool has_component() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 5;
  inline const ::connector::Component& component() const;
  inline ::connector::Component* mutable_component();
  inline ::connector::Component* release_component();
  inline void set_allocated_component(::connector::Component* component);

  // @@protoc_insertion_point(class_scope:connector.Request)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_component();
  inline void clear_has_component();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::connector::Attribute* attribute_;
  ::connector::Component* component_;
  int command_;
  friend void  protobuf_AddDesc_connector_2eproto();
  friend void protobuf_AssignDesc_connector_2eproto();
  friend void protobuf_ShutdownFile_connector_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_Status Status;
  static const Status SUCCESS = Reply_Status_SUCCESS;
  static const Status ERROR = Reply_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Reply_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Reply_Status_Status_MIN;
  static const Status Status_MAX =
    Reply_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Reply_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Reply_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Reply_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Reply_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .connector.Reply.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::connector::Reply_Status status() const;
  inline void set_status(::connector::Reply_Status value);

  // repeated .connector.Component component = 2;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 2;
  inline const ::connector::Component& component(int index) const;
  inline ::connector::Component* mutable_component(int index);
  inline ::connector::Component* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
      mutable_component();

  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:connector.Reply)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::connector::Component > component_;
  ::std::string* message_;
  int status_;
  friend void  protobuf_AddDesc_connector_2eproto();
  friend void protobuf_AssignDesc_connector_2eproto();
  friend void protobuf_ShutdownFile_connector_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .connector.Request.Command command = 1;
inline bool Request::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::connector::Request_Command Request::command() const {
  // @@protoc_insertion_point(field_get:connector.Request.command)
  return static_cast< ::connector::Request_Command >(command_);
}
inline void Request::set_command(::connector::Request_Command value) {
  assert(::connector::Request_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:connector.Request.command)
}

// repeated string path = 2;
inline int Request::path_size() const {
  return path_.size();
}
inline void Request::clear_path() {
  path_.Clear();
}
inline const ::std::string& Request::path(int index) const {
  // @@protoc_insertion_point(field_get:connector.Request.path)
  return path_.Get(index);
}
inline ::std::string* Request::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Request.path)
  return path_.Mutable(index);
}
inline void Request::set_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:connector.Request.path)
  path_.Mutable(index)->assign(value);
}
inline void Request::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:connector.Request.path)
}
inline void Request::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:connector.Request.path)
}
inline ::std::string* Request::add_path() {
  return path_.Add();
}
inline void Request::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:connector.Request.path)
}
inline void Request::add_path(const char* value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:connector.Request.path)
}
inline void Request::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:connector.Request.path)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::path() const {
  // @@protoc_insertion_point(field_list:connector.Request.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:connector.Request.path)
  return &path_;
}

// repeated uint32 id = 3;
inline int Request::id_size() const {
  return id_.size();
}
inline void Request::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 Request::id(int index) const {
  // @@protoc_insertion_point(field_get:connector.Request.id)
  return id_.Get(index);
}
inline void Request::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:connector.Request.id)
}
inline void Request::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:connector.Request.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Request::id() const {
  // @@protoc_insertion_point(field_list:connector.Request.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Request::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:connector.Request.id)
  return &id_;
}

// optional .connector.Attribute attribute = 4;
inline bool Request::has_attribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_attribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_attribute() {
  if (attribute_ != NULL) attribute_->::connector::Attribute::Clear();
  clear_has_attribute();
}
inline const ::connector::Attribute& Request::attribute() const {
  // @@protoc_insertion_point(field_get:connector.Request.attribute)
  return attribute_ != NULL ? *attribute_ : *default_instance_->attribute_;
}
inline ::connector::Attribute* Request::mutable_attribute() {
  set_has_attribute();
  if (attribute_ == NULL) attribute_ = new ::connector::Attribute;
  // @@protoc_insertion_point(field_mutable:connector.Request.attribute)
  return attribute_;
}
inline ::connector::Attribute* Request::release_attribute() {
  clear_has_attribute();
  ::connector::Attribute* temp = attribute_;
  attribute_ = NULL;
  return temp;
}
inline void Request::set_allocated_attribute(::connector::Attribute* attribute) {
  delete attribute_;
  attribute_ = attribute;
  if (attribute) {
    set_has_attribute();
  } else {
    clear_has_attribute();
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Request.attribute)
}

// optional .connector.Component component = 5;
inline bool Request::has_component() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_component() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_component() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_component() {
  if (component_ != NULL) component_->::connector::Component::Clear();
  clear_has_component();
}
inline const ::connector::Component& Request::component() const {
  // @@protoc_insertion_point(field_get:connector.Request.component)
  return component_ != NULL ? *component_ : *default_instance_->component_;
}
inline ::connector::Component* Request::mutable_component() {
  set_has_component();
  if (component_ == NULL) component_ = new ::connector::Component;
  // @@protoc_insertion_point(field_mutable:connector.Request.component)
  return component_;
}
inline ::connector::Component* Request::release_component() {
  clear_has_component();
  ::connector::Component* temp = component_;
  component_ = NULL;
  return temp;
}
inline void Request::set_allocated_component(::connector::Component* component) {
  delete component_;
  component_ = component;
  if (component) {
    set_has_component();
  } else {
    clear_has_component();
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Request.component)
}

// -------------------------------------------------------------------

// Reply

// required .connector.Reply.Status status = 1;
inline bool Reply::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::connector::Reply_Status Reply::status() const {
  // @@protoc_insertion_point(field_get:connector.Reply.status)
  return static_cast< ::connector::Reply_Status >(status_);
}
inline void Reply::set_status(::connector::Reply_Status value) {
  assert(::connector::Reply_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:connector.Reply.status)
}

// repeated .connector.Component component = 2;
inline int Reply::component_size() const {
  return component_.size();
}
inline void Reply::clear_component() {
  component_.Clear();
}
inline const ::connector::Component& Reply::component(int index) const {
  // @@protoc_insertion_point(field_get:connector.Reply.component)
  return component_.Get(index);
}
inline ::connector::Component* Reply::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Reply.component)
  return component_.Mutable(index);
}
inline ::connector::Component* Reply::add_component() {
  // @@protoc_insertion_point(field_add:connector.Reply.component)
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
Reply::component() const {
  // @@protoc_insertion_point(field_list:connector.Reply.component)
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
Reply::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:connector.Reply.component)
  return &component_;
}

// optional string message = 3;
inline bool Reply::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reply::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reply::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reply::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Reply::message() const {
  // @@protoc_insertion_point(field_get:connector.Reply.message)
  return *message_;
}
inline void Reply::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:connector.Reply.message)
}
inline void Reply::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:connector.Reply.message)
}
inline void Reply::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:connector.Reply.message)
}
inline ::std::string* Reply::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:connector.Reply.message)
  return message_;
}
inline ::std::string* Reply::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Reply::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Reply.message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connector

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::connector::Request_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::connector::Request_Command>() {
  return ::connector::Request_Command_descriptor();
}
template <> struct is_proto_enum< ::connector::Reply_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::connector::Reply_Status>() {
  return ::connector::Reply_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_connector_2eproto__INCLUDED
