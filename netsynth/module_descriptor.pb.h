// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module_descriptor.proto

#ifndef PROTOBUF_module_5fdescriptor_2eproto__INCLUDED
#define PROTOBUF_module_5fdescriptor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace connector {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_5fdescriptor_2eproto();
void protobuf_AssignDesc_module_5fdescriptor_2eproto();
void protobuf_ShutdownFile_module_5fdescriptor_2eproto();

class Description;
class Component;
class Attribute;
class Value;

enum Component_Type {
  Component_Type_Rack = 0,
  Component_Type_Module = 1,
  Component_Type_Knob = 2,
  Component_Type_Selector = 3,
  Component_Type_Port = 4
};
bool Component_Type_IsValid(int value);
const Component_Type Component_Type_Type_MIN = Component_Type_Rack;
const Component_Type Component_Type_Type_MAX = Component_Type_Port;
const int Component_Type_Type_ARRAYSIZE = Component_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Component_Type_descriptor();
inline const ::std::string& Component_Type_Name(Component_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Component_Type_descriptor(), value);
}
inline bool Component_Type_Parse(
    const ::std::string& name, Component_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Component_Type>(
    Component_Type_descriptor(), name, value);
}
// ===================================================================

class Description : public ::google::protobuf::Message {
 public:
  Description();
  virtual ~Description();

  Description(const Description& from);

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Description& default_instance();

  void Swap(Description* other);

  // implements Message ----------------------------------------------

  Description* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .connector.Component component = 1;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 1;
  inline const ::connector::Component& component(int index) const;
  inline ::connector::Component* mutable_component(int index);
  inline ::connector::Component* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
      mutable_component();

  // @@protoc_insertion_point(class_scope:connector.Description)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::connector::Component > component_;
  friend void  protobuf_AddDesc_module_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_module_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_module_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static Description* default_instance_;
};
// -------------------------------------------------------------------

class Component : public ::google::protobuf::Message {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();

  void Swap(Component* other);

  // implements Message ----------------------------------------------

  Component* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Component_Type Type;
  static const Type Rack = Component_Type_Rack;
  static const Type Module = Component_Type_Module;
  static const Type Knob = Component_Type_Knob;
  static const Type Selector = Component_Type_Selector;
  static const Type Port = Component_Type_Port;
  static inline bool Type_IsValid(int value) {
    return Component_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Component_Type_Type_MIN;
  static const Type Type_MAX =
    Component_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Component_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Component_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Component_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Component_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .connector.Component.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::connector::Component_Type type() const;
  inline void set_type(::connector::Component_Type value);

  // optional uint32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .connector.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::connector::Attribute& attribute(int index) const;
  inline ::connector::Attribute* mutable_attribute(int index);
  inline ::connector::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::connector::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::connector::Attribute >*
      mutable_attribute();

  // repeated .connector.Component sub_component = 4;
  inline int sub_component_size() const;
  inline void clear_sub_component();
  static const int kSubComponentFieldNumber = 4;
  inline const ::connector::Component& sub_component(int index) const;
  inline ::connector::Component* mutable_sub_component(int index);
  inline ::connector::Component* add_sub_component();
  inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
      sub_component() const;
  inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
      mutable_sub_component();

  // @@protoc_insertion_point(class_scope:connector.Component)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::RepeatedPtrField< ::connector::Attribute > attribute_;
  ::google::protobuf::RepeatedPtrField< ::connector::Component > sub_component_;
  friend void  protobuf_AddDesc_module_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_module_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_module_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static Component* default_instance_;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::Message {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();

  void Swap(Attribute* other);

  // implements Message ----------------------------------------------

  Attribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .connector.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::connector::Value& value() const;
  inline ::connector::Value* mutable_value();
  inline ::connector::Value* release_value();
  inline void set_allocated_value(::connector::Value* value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:connector.Attribute)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::connector::Value* value_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_module_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_module_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_module_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string svalue = 1;
  inline bool has_svalue() const;
  inline void clear_svalue();
  static const int kSvalueFieldNumber = 1;
  inline const ::std::string& svalue() const;
  inline void set_svalue(const ::std::string& value);
  inline void set_svalue(const char* value);
  inline void set_svalue(const char* value, size_t size);
  inline ::std::string* mutable_svalue();
  inline ::std::string* release_svalue();
  inline void set_allocated_svalue(::std::string* svalue);

  // optional int32 ivalue = 2;
  inline bool has_ivalue() const;
  inline void clear_ivalue();
  static const int kIvalueFieldNumber = 2;
  inline ::google::protobuf::int32 ivalue() const;
  inline void set_ivalue(::google::protobuf::int32 value);

  // optional double dvalue = 3;
  inline bool has_dvalue() const;
  inline void clear_dvalue();
  static const int kDvalueFieldNumber = 3;
  inline double dvalue() const;
  inline void set_dvalue(double value);

  // repeated .connector.Value avalue = 4;
  inline int avalue_size() const;
  inline void clear_avalue();
  static const int kAvalueFieldNumber = 4;
  inline const ::connector::Value& avalue(int index) const;
  inline ::connector::Value* mutable_avalue(int index);
  inline ::connector::Value* add_avalue();
  inline const ::google::protobuf::RepeatedPtrField< ::connector::Value >&
      avalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::connector::Value >*
      mutable_avalue();

  // @@protoc_insertion_point(class_scope:connector.Value)
 private:
  inline void set_has_svalue();
  inline void clear_has_svalue();
  inline void set_has_ivalue();
  inline void clear_has_ivalue();
  inline void set_has_dvalue();
  inline void clear_has_dvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* svalue_;
  double dvalue_;
  ::google::protobuf::RepeatedPtrField< ::connector::Value > avalue_;
  ::google::protobuf::int32 ivalue_;
  friend void  protobuf_AddDesc_module_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_module_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_module_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// ===================================================================


// ===================================================================

// Description

// repeated .connector.Component component = 1;
inline int Description::component_size() const {
  return component_.size();
}
inline void Description::clear_component() {
  component_.Clear();
}
inline const ::connector::Component& Description::component(int index) const {
  // @@protoc_insertion_point(field_get:connector.Description.component)
  return component_.Get(index);
}
inline ::connector::Component* Description::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Description.component)
  return component_.Mutable(index);
}
inline ::connector::Component* Description::add_component() {
  // @@protoc_insertion_point(field_add:connector.Description.component)
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
Description::component() const {
  // @@protoc_insertion_point(field_list:connector.Description.component)
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
Description::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:connector.Description.component)
  return &component_;
}

// -------------------------------------------------------------------

// Component

// required string name = 1;
inline bool Component::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Component::name() const {
  // @@protoc_insertion_point(field_get:connector.Component.name)
  return *name_;
}
inline void Component::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:connector.Component.name)
}
inline void Component::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:connector.Component.name)
}
inline void Component::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:connector.Component.name)
}
inline ::std::string* Component::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:connector.Component.name)
  return name_;
}
inline ::std::string* Component::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Component::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Component.name)
}

// optional .connector.Component.Type type = 2;
inline bool Component::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Component::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Component::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Component::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::connector::Component_Type Component::type() const {
  // @@protoc_insertion_point(field_get:connector.Component.type)
  return static_cast< ::connector::Component_Type >(type_);
}
inline void Component::set_type(::connector::Component_Type value) {
  assert(::connector::Component_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:connector.Component.type)
}

// optional uint32 id = 5;
inline bool Component::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Component::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Component::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Component::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Component::id() const {
  // @@protoc_insertion_point(field_get:connector.Component.id)
  return id_;
}
inline void Component::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:connector.Component.id)
}

// repeated .connector.Attribute attribute = 3;
inline int Component::attribute_size() const {
  return attribute_.size();
}
inline void Component::clear_attribute() {
  attribute_.Clear();
}
inline const ::connector::Attribute& Component::attribute(int index) const {
  // @@protoc_insertion_point(field_get:connector.Component.attribute)
  return attribute_.Get(index);
}
inline ::connector::Attribute* Component::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Component.attribute)
  return attribute_.Mutable(index);
}
inline ::connector::Attribute* Component::add_attribute() {
  // @@protoc_insertion_point(field_add:connector.Component.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connector::Attribute >&
Component::attribute() const {
  // @@protoc_insertion_point(field_list:connector.Component.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::connector::Attribute >*
Component::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:connector.Component.attribute)
  return &attribute_;
}

// repeated .connector.Component sub_component = 4;
inline int Component::sub_component_size() const {
  return sub_component_.size();
}
inline void Component::clear_sub_component() {
  sub_component_.Clear();
}
inline const ::connector::Component& Component::sub_component(int index) const {
  // @@protoc_insertion_point(field_get:connector.Component.sub_component)
  return sub_component_.Get(index);
}
inline ::connector::Component* Component::mutable_sub_component(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Component.sub_component)
  return sub_component_.Mutable(index);
}
inline ::connector::Component* Component::add_sub_component() {
  // @@protoc_insertion_point(field_add:connector.Component.sub_component)
  return sub_component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connector::Component >&
Component::sub_component() const {
  // @@protoc_insertion_point(field_list:connector.Component.sub_component)
  return sub_component_;
}
inline ::google::protobuf::RepeatedPtrField< ::connector::Component >*
Component::mutable_sub_component() {
  // @@protoc_insertion_point(field_mutable_list:connector.Component.sub_component)
  return &sub_component_;
}

// -------------------------------------------------------------------

// Attribute

// required string name = 1;
inline bool Attribute::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attribute::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attribute::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Attribute::name() const {
  // @@protoc_insertion_point(field_get:connector.Attribute.name)
  return *name_;
}
inline void Attribute::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:connector.Attribute.name)
}
inline void Attribute::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:connector.Attribute.name)
}
inline void Attribute::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:connector.Attribute.name)
}
inline ::std::string* Attribute::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:connector.Attribute.name)
  return name_;
}
inline ::std::string* Attribute::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Attribute::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Attribute.name)
}

// optional .connector.Value value = 2;
inline bool Attribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attribute::clear_value() {
  if (value_ != NULL) value_->::connector::Value::Clear();
  clear_has_value();
}
inline const ::connector::Value& Attribute::value() const {
  // @@protoc_insertion_point(field_get:connector.Attribute.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::connector::Value* Attribute::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::connector::Value;
  // @@protoc_insertion_point(field_mutable:connector.Attribute.value)
  return value_;
}
inline ::connector::Value* Attribute::release_value() {
  clear_has_value();
  ::connector::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Attribute::set_allocated_value(::connector::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Attribute.value)
}

// optional uint32 id = 3;
inline bool Attribute::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attribute::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attribute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Attribute::id() const {
  // @@protoc_insertion_point(field_get:connector.Attribute.id)
  return id_;
}
inline void Attribute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:connector.Attribute.id)
}

// -------------------------------------------------------------------

// Value

// optional string svalue = 1;
inline bool Value::has_svalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_svalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_svalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_svalue() {
  if (svalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svalue_->clear();
  }
  clear_has_svalue();
}
inline const ::std::string& Value::svalue() const {
  // @@protoc_insertion_point(field_get:connector.Value.svalue)
  return *svalue_;
}
inline void Value::set_svalue(const ::std::string& value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
  // @@protoc_insertion_point(field_set:connector.Value.svalue)
}
inline void Value::set_svalue(const char* value) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:connector.Value.svalue)
}
inline void Value::set_svalue(const char* value, size_t size) {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svalue_ = new ::std::string;
  }
  svalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:connector.Value.svalue)
}
inline ::std::string* Value::mutable_svalue() {
  set_has_svalue();
  if (svalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:connector.Value.svalue)
  return svalue_;
}
inline ::std::string* Value::release_svalue() {
  clear_has_svalue();
  if (svalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svalue_;
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Value::set_allocated_svalue(::std::string* svalue) {
  if (svalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svalue_;
  }
  if (svalue) {
    set_has_svalue();
    svalue_ = svalue;
  } else {
    clear_has_svalue();
    svalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:connector.Value.svalue)
}

// optional int32 ivalue = 2;
inline bool Value::has_ivalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_ivalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_ivalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_ivalue() {
  ivalue_ = 0;
  clear_has_ivalue();
}
inline ::google::protobuf::int32 Value::ivalue() const {
  // @@protoc_insertion_point(field_get:connector.Value.ivalue)
  return ivalue_;
}
inline void Value::set_ivalue(::google::protobuf::int32 value) {
  set_has_ivalue();
  ivalue_ = value;
  // @@protoc_insertion_point(field_set:connector.Value.ivalue)
}

// optional double dvalue = 3;
inline bool Value::has_dvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_dvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_dvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_dvalue() {
  dvalue_ = 0;
  clear_has_dvalue();
}
inline double Value::dvalue() const {
  // @@protoc_insertion_point(field_get:connector.Value.dvalue)
  return dvalue_;
}
inline void Value::set_dvalue(double value) {
  set_has_dvalue();
  dvalue_ = value;
  // @@protoc_insertion_point(field_set:connector.Value.dvalue)
}

// repeated .connector.Value avalue = 4;
inline int Value::avalue_size() const {
  return avalue_.size();
}
inline void Value::clear_avalue() {
  avalue_.Clear();
}
inline const ::connector::Value& Value::avalue(int index) const {
  // @@protoc_insertion_point(field_get:connector.Value.avalue)
  return avalue_.Get(index);
}
inline ::connector::Value* Value::mutable_avalue(int index) {
  // @@protoc_insertion_point(field_mutable:connector.Value.avalue)
  return avalue_.Mutable(index);
}
inline ::connector::Value* Value::add_avalue() {
  // @@protoc_insertion_point(field_add:connector.Value.avalue)
  return avalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::connector::Value >&
Value::avalue() const {
  // @@protoc_insertion_point(field_list:connector.Value.avalue)
  return avalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::connector::Value >*
Value::mutable_avalue() {
  // @@protoc_insertion_point(field_mutable_list:connector.Value.avalue)
  return &avalue_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connector

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::connector::Component_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::connector::Component_Type>() {
  return ::connector::Component_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_5fdescriptor_2eproto__INCLUDED
