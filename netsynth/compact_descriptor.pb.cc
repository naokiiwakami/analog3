// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compact_descriptor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compact_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace compact_descriptor {

namespace {

const ::google::protobuf::Descriptor* Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Component_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Attribute_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_compact_5fdescriptor_2eproto() {
  protobuf_AddDesc_compact_5fdescriptor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "compact_descriptor.proto");
  GOOGLE_CHECK(file != NULL);
  Description_descriptor_ = file->message_type(0);
  static const int Description_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, component_),
  };
  Description_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Description_descriptor_,
      Description::default_instance_,
      Description_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Description));
  Component_descriptor_ = file->message_type(1);
  static const int Component_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, sub_component_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
  Component_Type_descriptor_ = Component_descriptor_->enum_type(0);
  Attribute_descriptor_ = file->message_type(2);
  static const int Attribute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, ivalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, id_),
  };
  Attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attribute_descriptor_,
      Attribute::default_instance_,
      Attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attribute));
  Attribute_Type_descriptor_ = Attribute_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_compact_5fdescriptor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Description_descriptor_, &Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attribute_descriptor_, &Attribute::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_compact_5fdescriptor_2eproto() {
  delete Description::default_instance_;
  delete Description_reflection_;
  delete Component::default_instance_;
  delete Component_reflection_;
  delete Attribute::default_instance_;
  delete Attribute_reflection_;
}

void protobuf_AddDesc_compact_5fdescriptor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030compact_descriptor.proto\022\022compact_desc"
    "riptor\"\?\n\013Description\0220\n\tcomponent\030\001 \003(\013"
    "2\035.compact_descriptor.Component\"\306\002\n\tComp"
    "onent\022\014\n\004name\030\001 \002(\t\0220\n\004type\030\002 \002(\0162\".comp"
    "act_descriptor.Component.Type\022\n\n\002id\030\003 \001("
    "\r\0220\n\tattribute\030\004 \003(\0132\035.compact_descripto"
    "r.Attribute\0224\n\rsub_component\030\005 \003(\0132\035.com"
    "pact_descriptor.Component\"\204\001\n\004Type\022\010\n\004Ra"
    "ck\020\000\022\n\n\006Module\020\001\022\010\n\004Knob\020\002\022\014\n\010Selector\020\003"
    "\022\022\n\016ValueInputPort\020\004\022\023\n\017ValueOutputPort\020"
    "\005\022\021\n\rNoteInputPort\020\006\022\022\n\016NoteOutputPort\020\007"
    "\"\336\001\n\tAttribute\0220\n\004type\030\001 \002(\0162\".compact_d"
    "escriptor.Attribute.Type\022\016\n\006ivalue\030\002 \001(\r"
    "\022\016\n\006svalue\030\003 \003(\t\022\n\n\002id\030\004 \001(\r\"s\n\004Type\022\t\n\005"
    "Value\020\000\022\t\n\005Scale\020\001\022\013\n\007Choices\020\002\022\n\n\006WireI"
    "d\020\003\022\r\n\tDirection\020\004\022\n\n\006Signal\020\005\022\016\n\nModule"
    "Type\020\006\022\021\n\rSelectorIndex\020\007", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "compact_descriptor.proto", &protobuf_RegisterTypes);
  Description::default_instance_ = new Description();
  Component::default_instance_ = new Component();
  Attribute::default_instance_ = new Attribute();
  Description::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  Attribute::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compact_5fdescriptor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compact_5fdescriptor_2eproto {
  StaticDescriptorInitializer_compact_5fdescriptor_2eproto() {
    protobuf_AddDesc_compact_5fdescriptor_2eproto();
  }
} static_descriptor_initializer_compact_5fdescriptor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Description::kComponentFieldNumber;
#endif  // !_MSC_VER

Description::Description()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:compact_descriptor.Description)
}

void Description::InitAsDefaultInstance() {
}

Description::Description(const Description& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:compact_descriptor.Description)
}

void Description::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Description::~Description() {
  // @@protoc_insertion_point(destructor:compact_descriptor.Description)
  SharedDtor();
}

void Description::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Description::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Description_descriptor_;
}

const Description& Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fdescriptor_2eproto();
  return *default_instance_;
}

Description* Description::default_instance_ = NULL;

Description* Description::New() const {
  return new Description;
}

void Description::Clear() {
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compact_descriptor.Description)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .compact_descriptor.Component component = 1;
      case 1: {
        if (tag == 10) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_component;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compact_descriptor.Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compact_descriptor.Description)
  return false;
#undef DO_
}

void Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compact_descriptor.Description)
  // repeated .compact_descriptor.Component component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->component(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compact_descriptor.Description)
}

::google::protobuf::uint8* Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:compact_descriptor.Description)
  // repeated .compact_descriptor.Component component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->component(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compact_descriptor.Description)
  return target;
}

int Description::ByteSize() const {
  int total_size = 0;

  // repeated .compact_descriptor.Component component = 1;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Description::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Description* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Description*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Description::MergeFrom(const Description& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Description::CopyFrom(const Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->component())) return false;
  return true;
}

void Description::Swap(Description* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Description::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Description_descriptor_;
  metadata.reflection = Description_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Component_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_Type_descriptor_;
}
bool Component_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Component_Type Component::Rack;
const Component_Type Component::Module;
const Component_Type Component::Knob;
const Component_Type Component::Selector;
const Component_Type Component::ValueInputPort;
const Component_Type Component::ValueOutputPort;
const Component_Type Component::NoteInputPort;
const Component_Type Component::NoteOutputPort;
const Component_Type Component::Type_MIN;
const Component_Type Component::Type_MAX;
const int Component::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Component::kNameFieldNumber;
const int Component::kTypeFieldNumber;
const int Component::kIdFieldNumber;
const int Component::kAttributeFieldNumber;
const int Component::kSubComponentFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:compact_descriptor.Component)
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:compact_descriptor.Component)
}

void Component::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:compact_descriptor.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fdescriptor_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Component*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  sub_component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compact_descriptor.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .compact_descriptor.Component.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::compact_descriptor::Component_Type_IsValid(value)) {
            set_type(static_cast< ::compact_descriptor::Component_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .compact_descriptor.Attribute attribute = 4;
      case 4: {
        if (tag == 34) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectTag(42)) goto parse_sub_component;
        break;
      }

      // repeated .compact_descriptor.Component sub_component = 5;
      case 5: {
        if (tag == 42) {
         parse_sub_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sub_component;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compact_descriptor.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compact_descriptor.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compact_descriptor.Component)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .compact_descriptor.Component.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // repeated .compact_descriptor.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  // repeated .compact_descriptor.Component sub_component = 5;
  for (int i = 0; i < this->sub_component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sub_component(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compact_descriptor.Component)
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:compact_descriptor.Component)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .compact_descriptor.Component.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // repeated .compact_descriptor.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  // repeated .compact_descriptor.Component sub_component = 5;
  for (int i = 0; i < this->sub_component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sub_component(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compact_descriptor.Component)
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .compact_descriptor.Component.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .compact_descriptor.Attribute attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .compact_descriptor.Component sub_component = 5;
  total_size += 1 * this->sub_component_size();
  for (int i = 0; i < this->sub_component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_component(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  sub_component_.MergeFrom(from.sub_component_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attribute())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sub_component())) return false;
  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    attribute_.Swap(&other->attribute_);
    sub_component_.Swap(&other->sub_component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Attribute_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_Type_descriptor_;
}
bool Attribute_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Attribute_Type Attribute::Value;
const Attribute_Type Attribute::Scale;
const Attribute_Type Attribute::Choices;
const Attribute_Type Attribute::WireId;
const Attribute_Type Attribute::Direction;
const Attribute_Type Attribute::Signal;
const Attribute_Type Attribute::ModuleType;
const Attribute_Type Attribute::SelectorIndex;
const Attribute_Type Attribute::Type_MIN;
const Attribute_Type Attribute::Type_MAX;
const int Attribute::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Attribute::kTypeFieldNumber;
const int Attribute::kIvalueFieldNumber;
const int Attribute::kSvalueFieldNumber;
const int Attribute::kIdFieldNumber;
#endif  // !_MSC_VER

Attribute::Attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:compact_descriptor.Attribute)
}

void Attribute::InitAsDefaultInstance() {
}

Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:compact_descriptor.Attribute)
}

void Attribute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ivalue_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:compact_descriptor.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_descriptor_;
}

const Attribute& Attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fdescriptor_2eproto();
  return *default_instance_;
}

Attribute* Attribute::default_instance_ = NULL;

Attribute* Attribute::New() const {
  return new Attribute;
}

void Attribute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Attribute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(type_, ivalue_);
    id_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  svalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:compact_descriptor.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .compact_descriptor.Attribute.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::compact_descriptor::Attribute_Type_IsValid(value)) {
            set_type(static_cast< ::compact_descriptor::Attribute_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ivalue;
        break;
      }

      // optional uint32 ivalue = 2;
      case 2: {
        if (tag == 16) {
         parse_ivalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svalue;
        break;
      }

      // repeated string svalue = 3;
      case 3: {
        if (tag == 26) {
         parse_svalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_svalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->svalue(this->svalue_size() - 1).data(),
            this->svalue(this->svalue_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "svalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svalue;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:compact_descriptor.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:compact_descriptor.Attribute)
  return false;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:compact_descriptor.Attribute)
  // required .compact_descriptor.Attribute.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 ivalue = 2;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ivalue(), output);
  }

  // repeated string svalue = 3;
  for (int i = 0; i < this->svalue_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->svalue(i).data(), this->svalue(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "svalue");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->svalue(i), output);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:compact_descriptor.Attribute)
}

::google::protobuf::uint8* Attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:compact_descriptor.Attribute)
  // required .compact_descriptor.Attribute.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 ivalue = 2;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ivalue(), target);
  }

  // repeated string svalue = 3;
  for (int i = 0; i < this->svalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svalue(i).data(), this->svalue(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "svalue");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->svalue(i), target);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:compact_descriptor.Attribute)
  return target;
}

int Attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .compact_descriptor.Attribute.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 ivalue = 2;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ivalue());
    }

    // optional uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated string svalue = 3;
  total_size += 1 * this->svalue_size();
  for (int i = 0; i < this->svalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->svalue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  svalue_.MergeFrom(from.svalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ivalue_, other->ivalue_);
    svalue_.Swap(&other->svalue_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attribute_descriptor_;
  metadata.reflection = Attribute_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_descriptor

// @@protoc_insertion_point(global_scope)
